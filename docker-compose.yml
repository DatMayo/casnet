services:
  # FastAPI Development Server
  casnet-api:
    build:
      context: .
      target: development
    container_name: casnet-backend-dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATA_COUNT=10
      - ENABLE_DETAILED_LOGGING=true
      - SECRET_KEY=dev_secret_key_change_in_production
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080,http://localhost:4200
    volumes:
      # Mount source code for hot reload in development
      - ./src:/app/src
    restart: unless-stopped
    networks:
      - casnet-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for future use)
  postgres:
    image: postgres:15-alpine
    container_name: casnet-postgres-dev
    environment:
      - POSTGRES_DB=casnet
      - POSTGRES_USER=casnet_user
      - POSTGRES_PASSWORD=casnet_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - casnet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U casnet_user -d casnet"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack  # Only start when explicitly requested

  # Redis (for future caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: casnet-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    restart: unless-stopped
    networks:
      - casnet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack  # Only start when explicitly requested

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  casnet-network:
    driver: bridge
